-- ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ


-- ПОЛНОТЕКСТОВЫЙ ПОИСК


--Подключение с помощью psql
-- sudo -u postgres psql

-- Переключиться на созданную базу:
-- postqres=# \c test

-- Создать еще одну таблицу в базе данных

CREATE TABLE course_chapters(
  c_no text REFERENCES courses(c_no),
  ch_no text,
  ch_title text,
  txt text,
  CONSTRAINT pkt_ch PRIMARY KEY(ch_no, c_no)
);

-- Ввести в таблицу тексты первых лекций по специальностям CS301, CS305

INSERT INTO course_chapters (
  c_no, ch_no, ch_title, txt) 
VALUES 
  ('CS301', 'I', 'Базы данных', 
  'С этой главы начинается наше знакомство ' || 
  'с увлекательным миром баз данных'),
  ('CS301', 'II', 'Первые шаги',
  'Продолжаем знакомство с миром баз данных. ' ||
  'Создадим нашу первую текстовую базу данных'),
  ('CS305', 'I', 'Локальные сети', 
  'Здесь начнется наше полное приключений ' ||
  'путешествие в интригующий мир сетей');

-- Проверить результат

SELECT ch_no AS no, ch_title, txt 
FROM course_chapters \gx

-- [ RECORD 1 ]----------------------------------------------------------------------------------
-- no       | I
-- ch_title | Базы данных
-- txt      | С этой главы начинается наше знакомство с увлекательным миром баз данных
-- -[ RECORD 2 ]----------------------------------------------------------------------------------
-- no       | II
-- ch_title | Первые шаги
-- txt      | Продолжаем знакомство с миром баз данных. Создадим нашу первую текстовую базу данных
-- -[ RECORD 3 ]----------------------------------------------------------------------------------
-- no       | I
-- ch_title | Локольные сети
-- txt      | Здесь начнется наше полное приключений путешествие в интригующий мир сетей

-- Найти в таблице информацию по базам данных с помощью LIKE

SELECT txt
FROM course_chapters
WHERE txt LIKE '%базы данных' \gx

-- LIKE не опознает слово "базы" среди "баз", "базу"
--(0 rows)

SELECT txt
FROM course_chapters
WHERE txt LIKE '%базу данных' \gx

-- LIKE не опознала "баз" из I главы
-- -[ RECORD 1 ]-----------------------------------------------------------------------------
--  txt | Продолжаем знакомство с миром баз данных. Создадим нашу первую текстовую базу данных

-- Добавим к таблице глав еще один столбец со специальным типом данных - tsvector
-- раскладывает текст до лексем - поможет с поиском

ALTER TABLE course_chapters
ADD txtvector tsvector;

UPDATE course_chapters
SET txtvector = to_tsvector('russian', txt);

SELECT txtvector 
FROM course_chapters \gx

-- -[ RECORD 1 ]------------------------------------------------------------------------------------------------
-- txtvector | 'баз':10 'глав':3 'дан':11 'знакомств':6 'мир':9 'начина':4 'наш':5 'увлекательн':8
-- -[ RECORD 2 ]------------------------------------------------------------------------------------------------
-- txtvector | 'баз':5,11 'дан':6,12 'знакомств':2 'мир':4 'наш':8 'перв':9 'продолжа':1 'создад':7 'текстов':10
-- -[ RECORD 3 ]------------------------------------------------------------------------------------------------
-- txtvector | 'интриг':8 'мир':9 'начнет':2 'наш':3 'полн':4 'приключен':5 'путешеств':6 'сет':10

-- Включить в область поиска названия глав и придать им большую весомось, чем у остального текста
-- поправим таблицу

UPDATE course_chapters
  SET txtvector = 
      setweight(to_tsvector('russian', ch_title),'B')
      || ' ' || 
      setweight(to_tsvector('russian', txt), 'D');

SELECT txtvector
FROM course_chapters \gx

-- У лексем появился относительный вес - B, D (из A - D)

-- -[ RECORD 1 ]--------------------------------------------------------------------------------------------------------------
-- txtvector | 'баз':1B,12 'глав':5 'дан':2B,13 'знакомств':8 'мир':11 'начина':6 'наш':7 'увлекательн':10
-- -[ RECORD 2 ]--------------------------------------------------------------------------------------------------------------
-- txtvector | 'баз':7,13 'дан':8,14 'знакомств':4 'мир':6 'наш':10 'перв':1B,11 'продолжа':3 'создад':9 'текстов':12 'шаг':2B
-- -[ RECORD 3 ]--------------------------------------------------------------------------------------------------------------
-- txtvector | 'интриг':10 'локольн':1B 'мир':11 'начнет':4 'наш':5 'полн':6 'приключен':7 'путешеств':8 'сет':2B,12

-- Сделаем поиск с помощью to_tsquery

SELECT ch_title
FROM course_chapters
WHERE txtvector @@
      to_tsquery('russian', 'базы & данные');

--  ch_title   
---------------
-- Базы данных
-- Первые шаги
--(2 rows)

-- Благодаря присвоенным весам записи выводятся в порядке убывания рейтинга

SELECT  ch_title,
        ts_rank_cd('{0.1, 0.0, 1.0, 0.0}', txtvector, q)
FROM    course_chapters,
        to_tsquery('russian', 'базы & данных') q
WHERE   txtvector @@ q
ORDER BY ts_rank_cd DESC;

--  ch_title   | ts_rank_cd 
---------------+------------
-- Базы данных |  1.1181818
-- Первые шаги |       0.22
--(2 rows)

-- Выделим найденные слова <b>жирным шрифтом</b>

SELECT ts_headline(
  'russian',
  txt,
  to_tsquery('russian', 'мир'),
  'StartSel=<b>, StopSel=</b>, MaxWords=50, MinWords=5'
)
FROM course_chapters
WHERE to_tsvector('russian', txt) @@
      to_tsquery('russian', 'мир');


--                    ts_headline                     
------------------------------------------------------
-- знакомство с увлекательным <b>миром</b> баз данных
-- <b>миром</b> баз данных. Создадим нашу
-- путешествие в интригующий <b>мир</b> сетей
--(3 rows)


-- РАБОТА С JSON И JSONB


-- Допустим в базу студентов теперь можно вносить личные данные студентов с неопределенной четко структурой

-- Создадим таблицу с объектами json

CREATE TABLE student_details(
  de_id int,
  s_id int REFERENCES students(s_id),
  details json,
  CONSTRAINT pk_d PRIMARY KEY(s_id, de_id)
);

INSERT INTO student_details
  (de_id, s_id, details)
VALUES
  (1, 1451,
  '{  "достоинства": "отсутствуют",
      "недостатки": "неумеренное употребление мороженного",
      "статус": "отчислена"
  }'
  ),
  (2, 1432,
  '{  "хобби": 
        { "гитарист": 
            { "группа": "Постпрогрессоры",
              "гитары":["страт","телек"]
            }
        }
  }'
  ),
  (3, 1556,
  '{  "хобби": "костплей",
      "достоинства":
        { "мать-героиня":
            { "Вася": "м",
              "Семен": "м",
              "Люся": "ж",
              "Макар": "м",
              "Саша": "сведения отсутствуют"
            }
        }
  }'
  );

-- Содединим таблицы student_details и students для удобства вывода

SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id \gx


-- -[ RECORD 1 ]--------------------------------------------------------
-- name    | Anna
-- details | {  "достоинства": "отсутствуют",                           +
--         |       "недостатки": "неумеренное употребление мороженного",+
--         |       "статус": "отчислена"                                +
--         |   }
-- -[ RECORD 2 ]--------------------------------------------------------
-- name    | Victor
-- details | {  "хобби":                                                +
--         |         { "гитарист":                                      +
--         |             { "группа": "Постпрогрессоры",                 +
--         |               "гитары":["страт","телек"]                   +
--         |             }                                              +
--         |         }                                                  +
--         |   }
-- -[ RECORD 3 ]--------------------------------------------------------
-- name    | Nina
-- details | {  "хобби": "костплей",                                    +
--         |       "достоинства":                                       +
--         |         { "мать-героиня":                                  +
--         |             { "Вася": "м",                                 +
--         |               "Семен": "м",                                +
--         |               "Люся": "ж",                                 +
--         |               "Макар": "м",                                +
--         |               "Саша": "сведения отсутствуют"               +
--         |             }                                              +
--         |         }                                                  +
--         |   }

-- выведем достоинства студентов, с помощью оператора ->>

SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'достоинства' IS NOT NULL \gx

-- -[ RECORD 1 ]--------------------------------------------------------
-- name    | Anna
-- details | {  "достоинства": "отсутствуют",                           +
--         |       "недостатки": "неумеренное употребление мороженного",+
--         |       "статус": "отчислена"                                +
--         |   }
-- -[ RECORD 2 ]--------------------------------------------------------
-- name    | Nina
-- details | {  "хобби": "костплей",                                    +
--         |       "достоинства":                                       +
--         |         { "мать-героиня":                                  +
--         |             { "Вася": "м",                                 +
--         |               "Семен": "м",                                +
--         |               "Люся": "ж",                                 +
--         |               "Макар": "м",                                +
--         |               "Саша": "сведения отсутствуют"               +
--         |             }                                              +
--         |         }                                                  +
--         |   }

-- У Anna "достоинства": "отсутствуют", но она выведена, скорректируем запрос

SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'достоинства' IS NOT NULL 
AND sd.details ->> 'достоинства' != 'отсутствуют'\gx

-- -[ RECORD 1 ]-----------------------------------------
-- name    | Nina
-- details | {  "хобби": "костплей",                     +
--         |       "достоинства":                        +
--         |         { "мать-героиня":                   +
--         |             { "Вася": "м",                  +
--         |               "Семен": "м",                 +
--         |               "Люся": "ж",                  +
--         |               "Макар": "м",                 +
--         |               "Саша": "сведения отсутствуют"+
--         |             }                               +
--         |         }                                   +
--         |   }

-- Попробуем найти на каких гитарах играет Вася

SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id
AND sd.details ->> 'гитары' IS NOT NULL \gx 

-- (0 rows)

-- ничего не найдено т.к. соотвестствующая пара ключ-значение находится внутри иерархии json
-- чтобы спуститься вниз по иерархии, воспользуемся #>

SELECT  sd.de_id, s.name,
        sd.details #> '{хобби,гитарист,гитары}'
FROM    student_details sd, students s
WHERE   s.s_id = sd.s_id
AND     sd.details #> '{хобби,гитарист,гитары}' 
        IS NOT NULL;

-- de_id |  name  |     ?column?      
---------+--------+-------------------
--     2 | Victor | ["страт","телек"]
--(1 row)


-- используем бинарный способ хранения данных и формат jsonb

ALTER TABLE student_details
ADD details_b jsonb;

UPDATE student_details
SET details_b = to_jsonb(details);

SELECT de_id, details_b
FROM student_details \gx

-- -[ RECORD 1 ]---------------------------------------------------------------------------------------------------------------------------------------------
-- de_id     | 1
-- details_b | {"статус": "отчислена", "недостатки": "неумеренное употребление мороженного", "достоинства": "отсутствуют"}
-- -[ RECORD 2 ]---------------------------------------------------------------------------------------------------------------------------------------------
-- de_id     | 2
-- details_b | {"хобби": {"гитарист": {"гитары": ["страт", "телек"], "группа": "Постпрогрессоры"}}}
-- -[ RECORD 3 ]---------------------------------------------------------------------------------------------------------------------------------------------
-- de_id     | 3
-- details_b | {"хобби": "костплей", "достоинства": {"мать-героиня": {"Вася": "м", "Люся": "ж", "Саша": "сведения отсутствуют", "Макар": "м", "Семен": "м"}}}

-- Используем оператор вхождения в объект @> и функцию jsonb_pretty() для форматирования вывода типа jsonb

SELECT  s.name,
        jsonb_pretty(sd.details_b) json
FROM    student_details sd, students s
WHERE   s.s_id = sd.s_id
AND     sd.details_b @>
        '{"достоинства":{"мать-героиня":{}}}' \gx

-- -[ RECORD 1 ]-------------------------------------
-- name | Nina
-- json | {                                          +
--      |     "хобби": "костплей",                   +
--      |     "достоинства": {                       +
--      |         "мать-героиня": {                  +
--      |             "Вася": "м",                   +
--      |             "Люся": "ж",                   +
--      |             "Саша": "сведения отсутствуют",+
--      |             "Макар": "м",                  +
--      |             "Семен": "м"                   +
--      |         }                                  +
--      |     }                                      +
--      | }

-- воспользуемся фунцией jsonb_each(), разворачивающей пары ключ-значение

SELECT  s.name,
        jsonb_each(sd.details_b)
FROM    student_details sd, students s
WHERE   s.s_id = sd.s_id
AND     sd.details_b @>
        '{"достоинства":{"мать-героиня":{}}}' \gx

-- -[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------------
-- name       | Nina
-- jsonb_each | (хобби,"""костплей""")
-- -[ RECORD 2 ]----------------------------------------------------------------------------------------------------------------------------------------------
-- name       | Nina
-- jsonb_each | (достоинства,"{""мать-героиня"": {""Вася"": ""м"", ""Люся"": ""ж"", ""Саша"": ""сведения отсутствуют"", ""Макар"": ""м"", ""Семен"": ""м""}}")

-- запрос с функцией jsonb_path_query() - ищет значение "костплей"

SELECT  s_id, jsonb_path_query(
  details::jsonb,
  '$.хобби ? (@ == "костплей")'
)
FROM    student_details;

-- s_id | jsonb_path_query 
--------+------------------
-- 1556 | "костплей"
--(1 row)

-- для поиска "гитарист" такой запрос не подойдет, т.к. это ключ, а не значение
-- 
